@{
    ViewData["Title"] = "Models";
}

<h1>Model</h1>

<div>
    <p>
        The Model component corresponds to all the data-related logic that the user works with.
        This can represent either the data that is being transferred between the View and Controller components
        or any other business logic-related data. It can add or retrieve data from the database.
        It responds to the controller’s request because the controller can’t interact with the database by itself.
        The model interacts with the database and gives the required data back to the controller.
    </p>

    <p> Model code typically reflects real-world things. This code can hold raw data, or it will define
        the essential components of your app. For instance, if you were building a To-do app, the model code would
        define what a “task” is and what a “list” is – since those are the main components of a todo app.</p>

    <p>
        The model component contains the logic responsible for retrieving data from the database. For this, you can also use a JSON file in place of a database.
        For instance, in the SQL database of an eCommerce application, this could be something like product-data = db.get(SELECT * FROM products;).
        In many cases, the model communicates with the controller to send data to the view (user interface). In other cases, the model can send data directly to the view.
    </p>
</div>


